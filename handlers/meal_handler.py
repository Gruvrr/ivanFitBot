from keyboards import inline
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from keyboards.inline import generate_meal_keyboard, next_button, next_button2, next_button3
from utils.db import connect, close

router = Router()


@router.callback_query(lambda c: c.data == "meal")
async def send_meal(callback: CallbackQuery):
    keyboard = await generate_meal_keyboard()
    if keyboard:
        await callback.message.answer(text=f"üìå–ü–†–ò–ú–ï–ß–ê–ù–ò–ï\n\n"
                                           f"‚ùóÔ∏è–°–û–õ–¨ –∏—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –º–∞–ª—ã—Ö –¥–æ–∑–∞—Ö –≤–æ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –ø–∏—â–∏."
                                           f"–°–û–£–°–´, –£–°–ò–õ–ò–¢–ï–õ–ò –í–ö–£–°–ê - ‚ùå–ù–ï–¢üö´ –ù–ï–õ–¨–ó–Ø\n"
                                           f"‚úÖ–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∏ –∏ —Ç—Ä–∞–≤—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —Å–æ–ª—å.\n"
                                           f"‚úÖ–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Å–ª–∞: –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–µ, –æ–ª–∏–≤–∫–æ–≤–æ–µ, –ª—å–Ω—è–Ω–æ–µ, –≥–æ—Ä—á–∏—á–Ω–æ–µ –∏ —Ç–¥.\n"
                                           f"–°–ø–æ—Å–æ–±—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: –ù–∞ –ø–∞—Ä—É/ –≤–∞—Ä–∏–º/ —Ç—É—à–∏–º/–∑–∞–ø–µ–∫–∞–µ–º/ –∂–∞—Ä–∏–º (—Å —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–º –º–∞—Å–ª–æ–º/ –±–µ–∑ –º–∞—Å–ª–∞). \n"
                                           f"‚úÖ –ü–û–†–¶–ò–ò –ü–û –û–ë–™–Å–ú–£ –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –ù–ï –ë–û–õ–¨–®–ï 400 –≥—Ä–∞–º–º.\n"
                                           f"üö´ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏—ë–º –ø–∏—â–∏ –∑–∞ 4-5 —á–∞—Å–æ–≤ –¥–æ —Å–Ω–∞.–õ–æ–∂–∏—Ç–µ—Å—å —Å–ø–∞—Ç—å –≤ 23.00? "
                                           f"–¢–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ 18:00.\n"
                                           f"ü•§üí¶–ü–ò–¢–¨–ï–í–û–ô –†–ï–ñ–ò–ú\n"
                                           f"‚ñ™Ô∏è–ß–∞–π, –∫–æ—Ñ–µ, —Ü–∏–∫–æ—Ä–∏–π –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É. "
                                           f"–ù–û! ‚ùå–ë–ï–ó —Å–∞—Ö–∞—Ä–∞/—Å–∞—Ö–∞—Ä–æ–∑–∞–º–µ–Ω–∏—Ç–µ–ª—è/–º–æ–ª–æ–∫–∞!\n"
                                           f"‚ñ™Ô∏è–í–æ–¥–∞ ‚ùóÔ∏è–ë–ï–ó‚ùóÔ∏è –≥–∞–∑–∞ –º–∏–Ω–∏–º—É–º 2 –ª–∏—Ç—Ä–∞ –≤ –¥–µ–Ω—å, –∞ –ª—É—á—à–µ 3 –ª–∏—Ç—Ä–∞ –≤ –¥–µ–Ω—å.", reply_markup=keyboard )
    else:
        await callback.message.answer("–ù–µ—Ç –ø–∏—Ç–∞–Ω–∏—è")


async def send_breakfast(message: Message):
    meal_name = "–ó–∞–≤—Ç—Ä–∞–∫"
    conn = connect()
    cursor = conn.cursor()
    keyboard = next_button

    try:
        cursor.execute("SELECT meal_description FROM meals WHERE meal_name = %s;", (meal_name,))
        meal_description = cursor.fetchone()
        if meal_description:
            await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {meal_name}:\n\n{meal_description[0]}", reply_markup=keyboard)
        else:
            await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {meal_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    except Exception as e:
        print(f"Error: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

    finally:
        cursor.close()
        close(conn)


# @router.callback_query(lambda c: c.data == "next1")
# async def send_dinner(callback: CallbackQuery):
#     meal_name = "–û–±–µ–¥"
#     conn = connect()
#     cursor = conn.cursor()
#     keyboard = next_button2
#
#     try:
#         cursor.execute("SELECT meal_description FROM meals WHERE meal_name = %s;", (meal_name,))
#         meal_description = cursor.fetchone()
#         if meal_description:
#             await callback.message.answer(f"{meal_description[0]}", reply_markup=keyboard)
#         else:
#             await callback.message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {meal_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
#
#     except Exception as e:
#         print(f"Error: {e}")
#         await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
#
#     finally:
#         cursor.close()
#         close(conn)
#
#
# @router.callback_query(lambda c: c.data == "next2")
# async def send_supper(callback: CallbackQuery):
#     meal_name = "–£–∂–∏–Ω"
#     conn = connect()
#     cursor = conn.cursor()
#     keyboard = next_button3
#
#     try:
#         cursor.execute("SELECT meal_description FROM meals WHERE meal_name = %s;", (meal_name,))
#         meal_description = cursor.fetchone()
#         if meal_description:
#             await callback.message.answer(f"{meal_description[0]}", reply_markup=keyboard)
#         else:
#             await callback.message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {meal_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
#
#     except Exception as e:
#         print(f"Error: {e}")
#         await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
#
#     finally:
#         cursor.close()
#         close(conn)
