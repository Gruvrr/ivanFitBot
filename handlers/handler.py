from aiogram import Bot, Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
import handlers.questionary
from keyboards import inline
from utils.db import connect, close
from handlers.main_menu import main_menu
router = Router()



@router.message(CommandStart())
async def get_start(message: Message):
    conn = connect()
    try:
        with conn.cursor() as cursor:
            cursor.execute(f"SELECT telegram_user_id from users WHERE telegram_user_id = {message.from_user.id}")
            if not cursor.fetchone():
                print("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ get_start")
                await message.answer(text="–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∏ –ø—É–±–ª–∏—á–Ω—É—é –æ—Ñ–µ—Ä—Ç—É ",
                                     reply_markup=inline.accept_button)
            else:
                await main_menu(message)
    except Exception as _ex:
        print("ERROR", _ex)
    finally:
        close(conn)
        print("[INFO] Postgresql connection close")


@router.callback_query(lambda c: c.data == "accept" or c.data == "want_pay")
async def hello_msg(callback_query: CallbackQuery, bot: Bot, state: FSMContext):
    conn = connect()
    try:
        with conn.cursor() as cursor:
            cursor.execute(f"SELECT telegram_user_id from users WHERE telegram_user_id = {callback_query.from_user.id}")
            if not cursor.fetchone():
                print("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ hello_msg")
                await handlers.questionary.new_profile(callback_query.message, state)
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ü—Ä–æ–µ–∫—Ç 13 –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è:"
                                       f"‚ñ™Ô∏è12 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ 30-45 –º–∏–Ω—É—Ç\n\n"
                                       f"‚ñ™Ô∏è–ú–µ–Ω—é –Ω–∞ 4 –Ω–µ–¥–µ–ª–∏\n"
                                       f"‚ñ™Ô∏è–ß–∞—Ç —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏\n" 
                                       f"‚ñ™Ô∏è–ü—Ä—è–º—ã–µ —ç—Ñ–∏—Ä—ã\n" 
                                       f"‚ñ™Ô∏è–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\n"
                                       f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–æ–∑–º–æ–∂–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ 20 –º–∏–Ω—É—Ç", reply_markup=inline.subscribe_keyboard
                                       )
    except Exception as _ex:
        print("ERROR", _ex)
    finally:
        close(conn)
        print("[INFO] Postgresql connection close")


async def start_msg(message: Message):
    conn = connect()
    with conn.cursor() as cursor:
        cursor.execute(f"SELECT first_name from users WHERE telegram_user_id = {message.from_user.id}")
        first_name = cursor.fetchone()[0]
        print(first_name)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {first_name}\n"
                         f"–†–∞–¥ –í–∏–¥–µ—Ç—å —Ç–µ–±—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ 13\n"
                         f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —É–∂–µ —Å–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π —à–∞–≥ –Ω–∞ –ø—É—Ç–∏ –∫ –∑–¥–æ—Ä–æ–≤–æ–º—É –∏ –ø–æ–¥—Ç—è–Ω—É—Ç–æ–º—É —Ç–µ–ª—É! \n"
                         f"–¢–µ–ø–µ—Ä—å –≤–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π —Ç—ã –±—É–¥–µ—à—å —É–≤–µ—Ä–µ–Ω–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥, —Å—Ç–∞–Ω–æ–≤—è—Å—å —Å –∫–∞–∂–¥—ã–º –¥–Ω—ë–º –∞–∫—Ç–∏–≤–Ω–µ–µ, –≤—ã–Ω–æ—Å–ª–∏–≤–µ–µ –∏ —Å–∏–ª—å–Ω–µ–µ üí™")