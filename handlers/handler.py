import logging
import time
from aiogram import Bot, Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
import handlers.questionary
from keyboards import inline
from utils.db import connect, close
from handlers.main_menu import main_menu, main_manu_sub
from typing import Union
from os import getenv
from dotenv import load_dotenv

load_dotenv()
router = Router()
admin_id = getenv("ADMIN_ID")


@router.message(Command('menu'))
async def send_menu(message: Message):
    if str(message.from_user.id) == admin_id:
        buttons = [
            [KeyboardButton(text=command) for command in ["/add_link", "/add_meal"]],
            [KeyboardButton(text=command) for command in ["/create_user", "/send_training"]]
        ]
        markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=markup)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é.")


@router.message(CommandStart())
async def get_start(event: Union[Message, CallbackQuery]):
    if isinstance(event, Message):
        message = event
    else:
        message = event.message
    conn = connect()
    try:
        with conn.cursor() as cursor:
            cursor.execute(f"SELECT telegram_user_id, subscription_days from users WHERE telegram_user_id = {message.from_user.id}")
            logging.info("Connected to the database")
            result = cursor.fetchone()
            time.sleep(1)
            if not result:
                print("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ get_start")
                await message.answer(
                    text="–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–∏–º–∏ <a href='https://drive.google.com/file/d/1U99TKxSujWCUsdDMbeBEWDy0skMLxWdV/view?usp=sharing'>–ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a> –∏ <a href='https://drive.google.com/file/d/1s95OsgiqLXni3uwudW_Ts5F2-9bg_rOF/view?usp=sharing'>–ø—É–±–ª–∏—á–Ω—É—é –æ—Ñ–µ—Ä—Ç—É</a>",
                    parse_mode='HTML',
                                     reply_markup=inline.accept_button)
            else:
                user_id, subscription_days = result

                if subscription_days != 0:
                    await main_manu_sub(message, subscription_days)
                else:
                    await main_menu(message)
    except Exception as _ex:
        print("ERROR", _ex)
    finally:
        close(conn)
        print("[INFO] Postgresql connection close")


@router.callback_query(lambda c: c.data == "accept" or c.data == "want_pay" or c.data == "about")
async def hello_msg(callback_query: CallbackQuery, bot: Bot, state: FSMContext):
    conn = connect()
    try:
        with conn.cursor() as cursor:
            cursor.execute(f"SELECT telegram_user_id from users WHERE telegram_user_id = {callback_query.from_user.id}")
            if not cursor.fetchone():
                print("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ hello_msg")
                await handlers.questionary.new_profile(callback_query.message, state)
                await callback_query.answer()
            else:
                await callback_query.message.answer(f'–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ "–ü—Ä–æ–µ–∫—Ç 13" –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è:\n'
                                       f"‚ñ™Ô∏è12 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ 25-45 –º–∏–Ω—É—Ç\n"
                                       f"‚ñ™Ô∏è–ú–µ–Ω—é –Ω–∞ 4 –Ω–µ–¥–µ–ª–∏\n"
                                       f"‚ñ™Ô∏è–ß–∞—Ç —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏\n" 
                                       f"‚ñ™Ô∏è–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\n"
                                       f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–æ–∑–º–æ–∂–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ 20 –º–∏–Ω—É—Ç", reply_markup=inline.subscribe_keyboard
                                       )
                await callback_query.answer()
    except Exception as _ex:
        print("ERROR", _ex)
    finally:
        close(conn)
        print("[INFO] Postgresql connection close")


async def start_msg(message: Message):
    conn = connect()
    with conn.cursor() as cursor:
        cursor.execute(f"SELECT first_name from users WHERE telegram_user_id = {message.from_user.id}")
        first_name = cursor.fetchone()[0]
        print(first_name)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {first_name}\n"
                         f'–†–∞–¥ –í–∏–¥–µ—Ç—å —Ç–µ–±—è –Ω–∞ "–ü—Ä–æ–µ–∫—Ç–µ 13"\n'
                         f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —ç—Ç–æ —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π —à–∞–≥ –Ω–∞ –ø—É—Ç–∏ –∫ –∑–¥–æ—Ä–æ–≤–æ–º—É –∏ –ø–æ–¥—Ç—è–Ω—É—Ç–æ–º—É —Ç–µ–ª—É! \n"
                         f"–¢–µ–ø–µ—Ä—å –º—ã –≤–º–µ—Å—Ç–µ –±—É–¥–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥, —Å—Ç–∞–Ω–æ–≤—è—Å—å —Å –∫–∞–∂–¥—ã–º –¥–Ω—ë–º –∫—Ä–∞—Å–∏–≤–µ–µ, –∞–∫—Ç–∏–≤–Ω–µ–µ –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–µ–µüí™")


